//-----------------------------------------------------------------------------
// name: chirp.ck
// desc: manipulating fowls to make sound
//-----------------------------------------------------------------------------

// how many
4 => int N;
// allocate taps template
TapsTemp temp[N];
// name
"chirp1" => string name;

// load things
machine.add( "chirp_load.ck" );
// yield
me.yield();

//-----------------------------------------------------------------------------
// read templates from file
//-----------------------------------------------------------------------------
for( int i; i < N; i++ )
{
    // load it from library
    temp[i].readFromLibrary( name, i );
    // make sure it loaded
    if( !temp[i].ready() )
    {
        <<< "cannot load:", name, "number:", i >>>;
        me.exit();
    }
}


//-----------------------------------------------------------------------------
// our scale ratios
//-----------------------------------------------------------------------------
float s[12];
for( int i; i < s.cap(); i++ )
{
    std.mtof( i + 60 ) / std.mtof( 60 ) => s[i];
}


//-----------------------------------------------------------------------------
//------------------------------ play it once ---------------------------------
//-----------------------------------------------------------------------------
// start it
temp[0].play();
// wait
wait( 1 );

//-----------------------------------------------------------------------------
//----------------------------- (intermission) --------------------------------
//-----------------------------------------------------------------------------
1::second => now;


//-----------------------------------------------------------------------------
//------------------------------- stretched -----------------------------------
//-----------------------------------------------------------------------------
// set stretch
4 => temp[0].timeStretch;
// start it
temp[0].play();
// wait
wait( 1 );

// reset
1 => temp[0].timeStretch;


//-----------------------------------------------------------------------------
//---------------------------- (intermission) ---------------------------------
//-----------------------------------------------------------------------------
1::second => now;


//-----------------------------------------------------------------------------
//----------------------------- together now ----------------------------------
//-----------------------------------------------------------------------------
// gain
gain_all( .25 );

// tonic
s[0] => temp[0].freqWarp;
s[4] => temp[1].freqWarp;
s[7] => temp[2].freqWarp;
s[11] => temp[3].freqWarp;

// play
play_all();
// wait
wait_all();

//-----------------------------------------------------------------------------
//---------------------------- (intermission) ---------------------------------
//-----------------------------------------------------------------------------
1::second => now;


//-----------------------------------------------------------------------------
//---------------------------- hold the note ----------------------------------
//-----------------------------------------------------------------------------
2 => temp[0].timeStretch;
3 => temp[1].timeStretch;
4 => temp[2].timeStretch;
6 => temp[3].timeStretch;

// play
play_all();
// wait
wait_all();


//-----------------------------------------------------------------------------
//---------------------------- (intermission) ---------------------------------
//-----------------------------------------------------------------------------
1::second => now;


//-----------------------------------------------------------------------------
//---------------------------- lower the note ----------------------------------
//-----------------------------------------------------------------------------
// tonic
s[0]/4 => temp[0].freqWarp;
s[4]/4 => temp[1].freqWarp;
s[7]/4 => temp[2].freqWarp;
s[11]/4 => temp[3].freqWarp;

// play
play_all();
// wait
wait_all();


//-----------------------------------------------------------------------------
//------------------------------ clean up -------------------------------------
//-----------------------------------------------------------------------------
// close
close_all();


//-----------------------------------------------------------------------------
// play for all
//-----------------------------------------------------------------------------
fun void play_all()
{ play( N ); }

fun void play( int num )
{
    for( int i; i < num; i++ )
    {
       temp[i].play();
    }
}


//-----------------------------------------------------------------------------
// close for all
//-----------------------------------------------------------------------------
fun void close_all()
{ close( N ); }

fun void close( int num )
{
    for( int i; i < num; i++ )
    {
       temp[i].close();
    }
}


//-----------------------------------------------------------------------------
// wait for all
//-----------------------------------------------------------------------------
fun void wait_all()
{ wait( N ); }

fun void wait( int num )
{
    int yes;
    do
    {
        100::ms => now;
        0 => yes;
        for( int i; i < num; i++ )
            if( temp[i].playing() ) yes++;
    }
    while( yes );
}


//-----------------------------------------------------------------------------
// set gain for all
//-----------------------------------------------------------------------------
fun void gain_all( float g )
{
    for( int i; i < N; i++ )
        g => temp[i].gain;
}
